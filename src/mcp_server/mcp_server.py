from fastmcp import FastMCP
from ..tools.search import search_web
from ..tools.FileBase import FileBase
from ..graph import stream_graph_updates
from src.log_config import setup_logging

logger = setup_logging("mcp_server")

mcp = FastMCP(
    name="AAS",
    instructions="""
        This server provides different mcp tools.
    """,
)

@mcp.tool 
def search(search_term: str): 
    """Searches the web and returns results"""
    logger.info("Search tool invoked")
    logger.info(f"Search term: {search_term}")
    return search_web(search_term)

@mcp.tool 
def document_codebase(dir: str) -> dict:
    """Traverses the directory and creates documentation"""
    logger.info(f"Starting to document codebase at: {dir}")
    processed_files = []
    try:
        logger.info(f"Starting documentation for directory: {dir}")
        f_base = FileBase(dir)
        num_f = f_base.traverse()
        logger.info(f"Found {num_f} files to process")
        
        logger.info(f"Files list: {f_base.files}")
        
        if num_f == 0:
            logger.warning("No files found to process")
            return {
                "status": "success",
                "files_processed": [],
                "count": 0,
                "message": "No files found to process"
            }
        
        for i in range(num_f):
            logger.info(f"Processing file {i+1}/{num_f}")
            f = f_base.get_file()
            logger.info(f"Processing file {i+1}/{num_f}: {f}")
            
            if f is None:
                logger.warning(f"Finished processing files")
                break
                
            logger.info(f"Processing file: {f}")
            
            # Skip non-Python files
            if not f.endswith('.py'):
                logger.info(f"Skipping non-Python file: {f}")
                continue
        
            code = f_base.file_content(f)
            
            if code is None:
                logger.warning(f"Could not read content from file: {f}")
                continue
                
            logger.info(f"File content length: {len(code)} characters")
            
            # Prepare prompt for LLM
            content = " code: " + code
            prompt = """
            You are a code agent that strives for 
            1. Efficiency and performance of code, 
            2. Readability and maintanability
            3. Simplicity (Keep it simple stupid where possible)
            Your task is to improve documentation and commentation of the code, as well as provide Unit Tests where none are present
            extract the tests in an own Method called UNIT_test.
            ALWAYS add an caps lock comment '_______GENERATED BY CODE_AGENT_______' 
            to generated code from you at the beginning of the docstring. Dont change the existing code, only create comments and unit tests.
            Return ONLY the code, dont provide any natural language response as the content will be taken over directly in the codebase. 
            DO NOT change already existing code"""
            
            logger.info(f"Sending file to LLM for processing: {f}")
            updated_file = stream_graph_updates(prompt + content)
            logger.info(f"Received response from LLM, length: {len(updated_file) if updated_file else 0}")
            
            if updated_file:
                updated_file = updated_file.replace('```python', '')
                updated_file = updated_file.replace('```', '')
                f_base.update_file_content(f, updated_file)
                processed_files.append(f)
            else:
                logger.warning(f"No response from LLM for file: {f}")
        
        return {
            "status": "success",
            "files_processed": processed_files,
            "count": len(processed_files),
            "message": None
        }
                
    except Exception as e: 
        logger.error(f"Failed to create documentation for {dir}: {e}", exc_info=True)
        return { 
          "status": "error", 
          "files_processed": processed_files,
          "count": len(processed_files),
          "message": str(e)
         }


if __name__ == '__main__': 
    mcp.run()