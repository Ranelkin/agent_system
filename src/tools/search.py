from langchain_tavily import TavilySearch

from dotenv import load_dotenv
load_dotenv()

web_search = TavilySearch(max_results=2)

def search_web(search: str): 
    return web_search.invoke(search)


if __name__ == '__main__': 
    out = web_search.invoke("What's a 'node' in LangGraph?")
    print(out)


def UNIT_test():
    """
    _______GENERATED BY CODE_AGENT_______
    Lightweight unit tests for the web search wrapper.
    Tests are isolated by mocking TavilySearch invocation to avoid network calls.
    Returns True if tests pass, otherwise raises AssertionError.
    """
    from unittest.mock import patch
    import sys

    mod = sys.modules[__name__]
    with patch.object(mod, 'web_search') as mock_ws:
        mock_ws.invoke.return_value = "mocked result"
        result = search_web("sample query")
        assert result == "mocked result", "search_web did not return mocked result"
        mock_ws.invoke.assert_called_once_with("sample query")

    return True