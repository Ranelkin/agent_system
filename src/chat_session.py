from langgraph.prebuilt import create_react_agent
from .infrastructure.mcp.client.session_manager import MCPSessionManager
from .shared.log_config import setup_logging
from .model.agent import llm 

logger = setup_logging("chat_session")

def chat_session():
    """Main chat session - fully synchronous
    
    _______GENERATED BY CODE_AGENT_______
    """
    
    manager = MCPSessionManager()
    manager.start()
    
    try:
        tools = manager.get_tools()
        
        system_prompt = """You are an AI assistant that can search the web or document codebases.

        When asked to document a codebase:
        1. Extract the EXACT directory path from the user's message
        2. Call the document_codebase tool with that exact path as the argument
        3. Return the tool's output
        4. Do NOT make multiple calls or suggest alternative paths

        For other queries, use the Web Search tool if applicable."""
        
        # Create the agent WITHOUT a prompt template
        # create_react_agent handles the messaging internally
        agent = create_react_agent(
            llm, 
            tools,
            prompt=system_prompt  # Pass system prompt as state_modifier
        )
        
        # Chat loop
        logger.info("\nðŸ¤– AI Assistant ready! (type 'exit' to quit)\n")
        while True:
            query = input("You: ")
            if query.lower() in ['exit', 'quit', 'q']:
                break
            
            logger.info("\nAssistant: ")
            try:
                response = agent.invoke(
                    {"messages": [("system", system_prompt), ("human", query)]},
                    config={"recursion_limit": 50}
                )
                
                # Extract and log the response message content
                if "messages" in response and response["messages"]:
                    final_message = response["messages"][-1]
                    if hasattr(final_message, 'content'):
                        logger.info(final_message.content)
                    else:
                        logger.info(final_message)
                else:
                    logger.info(response)
                    
            except Exception as e:
                logger.error(f"Error in chat: {e}")
                logger.info(f"Error: {e}")
            
            logger.info("\n\n")  
                
    finally:
        logger.info("Finished processing request")
        manager.stop()
        logger.info("\nðŸ‘‹ Goodbye!")
       