"""
GENERATED BY CODE_AGENT
Unit tests for the target module using pytest. These tests dynamically discover the
module containing a setup_logging function (to avoid relying on a fixed filename)
and validate core behaviors:
- logger creation and handler types (size and time rotations)
- log file creation
- security filter masking behavior
- error on invalid rotation type
- behavior when file_output is disabled
"""

import os
import sys
import logging
import pytest
import importlib.util
from pathlib import Path
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler

# Helper: dynamically locate and load the target module that defines setup_logging
def _load_target_module():
    base_dir = Path(__file__).parent
    candidate = None
    for py_file in base_dir.glob("*.py"):
        if py_file.name.endswith("_test.py") or py_file.name == Path(__file__).name:
            continue
        spec = importlib.util.spec_from_file_location(f"target_module_{py_file.stem}", py_file.as_posix())
        mod = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(mod)
        if hasattr(mod, "setup_logging"):
            candidate = mod
            break
    if candidate is None:
        raise RuntimeError("Could not locate a module with a setup_logging function.")
    return candidate

# Lightweight fixture to clean up logs after each test
@pytest.fixture
def cleanup_logs():
    yield
    logs_dir = Path("logs")
    if logs_dir.exists() and logs_dir.is_dir():
        import shutil
        shutil.rmtree(logs_dir, ignore_errors=True)

def test_size_rotation_logger_created(cleanup_logs):
    mod = _load_target_module()
    logger = mod.setup_logging(
        'test_app_basic',
        log_level=logging.INFO,
        rotation_type='size',
        max_bytes=1024,
        backup_count=1,
        console_output=False,
        file_output=True,
        security_filter=['password']
    )
    assert logger is not None
    has_rotating = any(isinstance(h, RotatingFileHandler) for h in logger.handlers)
    assert has_rotating, "Expected a RotatingFileHandler when rotation_type='size'"
    log_path = os.path.join('logs', 'test_app_basic.log')
    assert os.path.exists(log_path), f"Log file should be created at {log_path}"

def test_security_filter_masks_password(cleanup_logs):
    mod = _load_target_module()
    logger = mod.setup_logging(
        'test_app_filter',
        log_level=logging.INFO,
        rotation_type='size',
        max_bytes=1024,
        backup_count=1,
        console_output=False,
        file_output=True,
        security_filter=['password']
    )
    # This message should have the word 'password' masked
    logger.info("User password: secret")
    log_path = os.path.join('logs', 'test_app_filter.log')
    # Ensure the log has been written before reading
    assert os.path.exists(log_path)
    with open(log_path, 'r') as f:
        content = f.read()
    assert "User ********" in content, f"Expected password to be masked in log, got: {content}"
    assert "password" not in content

def test_invalid_rotation_type_raises(cleanup_logs):
    mod = _load_target_module()
    with pytest.raises(ValueError):
        mod.setup_logging(
            'test_app_invalid',
            rotation_type='invalid',
            file_output=True,
            console_output=False
        )

def test_no_file_output_does_not_create_log_file(cleanup_logs):
    mod = _load_target_module()
    logger = mod.setup_logging(
        'test_app_no_file',
        log_level=logging.INFO,
        rotation_type='size',
        max_bytes=1024,
        backup_count=1,
        console_output=False,
        file_output=False,  # explicitly disable file output
        security_filter=None
    )
    assert logger is not None
    log_path = os.path.join('logs', 'test_app_no_file.log')
    # Since file_output is False, the log file should not exist
    assert not os.path.exists(log_path)

def test_time_rotation_handler_present(cleanup_logs):
    mod = _load_target_module()
    logger = mod.setup_logging(
        'test_app_time',
        log_level=logging.INFO,
        rotation_type='time',
        when='midnight',  # typical value; rotation will happen at that time interval
        interval=1,
        utc=False,
        console_output=False,
        file_output=True
    )
    assert logger is not None
    has_time_handler = any(isinstance(h, TimedRotatingFileHandler) for h in logger.handlers)
    assert has_time_handler, "Expected a TimedRotatingFileHandler when rotation_type='time'"

# Note: Tests create a 'logs' directory in the repository root. The cleanup_logs fixture
# ensures that directory is removed after each test to avoid cross-test pollution.