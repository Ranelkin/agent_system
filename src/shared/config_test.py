"""
GENERATED BY CODE_AGENT
Unit tests for the AppConfig module using pytest.
"""

import sys
import pytest
from pydantic import ValidationError

def test_appconfig_loads_from_env(monkeypatch):
    # Set required environment variables
    monkeypatch.setenv("OPENAI_API_KEY", "openai_key_123")
    monkeypatch.setenv("TAVILY_API_KEY", "tavily_key_456")

    # Ensure we load a fresh module instance
    if 'config' in sys.modules:
        del sys.modules['config']

    import config  # noqa: E402
    appcfg = config.config
    assert appcfg.openai_api_key == "openai_key_123"
    assert appcfg.tavily_api_key == "tavily_key_456"

def test_appconfig_uses_defaults_when_not_set(monkeypatch):
    # Remove optional env vars if present
    monkeypatch.delenv("LOG_LEVEL", raising=False)
    monkeypatch.delenv("MCP_SERVER_TIMEOUT", raising=False)
    # Ensure required keys are present to allow instantiation
    monkeypatch.delenv("OPENAI_API_KEY", raising=False)
    monkeypatch.delenv("TAVILY_API_KEY", raising=False)
    monkeypatch.setenv("OPENAI_API_KEY", "default_openai")
    monkeypatch.setenv("TAVILY_API_KEY", "default_tavily")

    if 'config' in sys.modules:
        del sys.modules['config']

    import config  # noqa: E402
    appcfg = config.config
    # Defaults should be applied
    assert appcfg.log_level == "INFO"
    assert appcfg.mcp_server_timeout == 30

def test_appconfig_missing_required_keys_raises(monkeypatch):
    # Remove required env vars to simulate missing config
    monkeypatch.delenv("OPENAI_API_KEY", raising=False)
    monkeypatch.delenv("TAVILY_API_KEY", raising=False)

    if 'config' in sys.modules:
        del sys.modules['config']

    with pytest.raises(ValidationError):
        import config  # noqa: F401