import os
from ..shared.log_config import setup_logging

logger = setup_logging('FileBase')

class FileBase():
    """
    GENERATED BY CODE_AGENT
    FileBase provides traversal and basic file access utilities for a directory.
    """
    def __init__(self, dir: str) -> None:
        """
        GENERATED BY CODE_AGENT
        Initialize the FileBase instance with a base directory to traverse for Python files.
        """
        # Directory path assigned to instance for traversal
        # _CA
        self.dir = dir
        logger.info(f"File Base initialized with dir: {dir}")
        self.files: list[str] = []
        self.num_files = 0 
        
    def traverse(self) -> None:
        """
        GENERATED BY CODE_AGENT
        Recursively traverse the directory tree starting at self.dir and collect
        Python files ending with .py, excluding those containing __ or .cpython in path.
        """
        # Initialize traversal stack and result container
        # _CA
        try:
            stack = [self.dir]
            result = []

            while stack:
                curr = stack.pop()
                if os.path.isdir(curr):
                    try:
                        children = [os.path.join(curr, child) for child in os.listdir(curr)]
                        stack.extend(reversed(children))
                    except PermissionError:
                        continue
                else:
                    result.append(curr)  

            # Filter out files with specific substrings
            result = [f for f in result if f.endswith('.py') and "__" not in f and ".cpython" not in f]
            self.files = result
            self.num_files = len(result)
            logger.info(f'Traversed filebase. Found {self.num_files} files')
            
        except Exception as e:
            logger.error(f"Failed to traverse FileBase: {e}")

    def file_content(self, file: str) -> str:
        """
        GENERATED BY CODE_AGENT
        Load and return the textual content of a given file.
        """
        # Read file content into a string
        # _CA
        try:
            content: str
            with open(file, 'r') as f:
                content = f.read()
            return content
        except Exception as e:
            logger.error(f"Failed to load file content from {file}: {e}")

    def update_file_content(self, file: str, updated_content: str):
        """
        GENERATED BY CODE_AGENT
        Update the contents of an existing file or create it if it does not exist.
        """
        # Local helper to perform the write operation
        # _CA
        def write_file(f): 
            with open(f, 'w') as f:
                f.write(updated_content)
            logger.info(f'Wrote file: {f_name}')
        try:
            f_name = os.path.basename(file)
            if os.path.exists(file):
                write_file(file)
            else: 
                os.makedirs(file, exist_ok=True)
                write_file(file)
                
        except Exception as e:
            logger.error(f"Failed to update file content for {file}: {e}")

    def get_file(self) -> str:
        """
        GENERATED BY CODE_AGENT
        Retrieve a file path from the internal queue of discovered files.
        """
        # Return a file from the list if available
        # _CA
        if self.files:
            return self.files.pop()
        return None
    
    def get_num_files(self) -> int: 
        """
        GENERATED BY CODE_AGENT
        Return the total number of discovered files.
        """
        # Return the number of discovered files
        # _CA
        return self.num_files

    def create_file(self, file: str, content: str) -> None: 
        """
        GENERATED BY CODE_AGENT
        Create or overwrite a file at the specified path with the given content.
        """
        # Open file for writing and populate content
        # _CA
        with open(file, 'w') as f: 
            logger.info(f"Created file {file.split('/')[-1]} at dir: {file.split('/')[:-1]}")
            f.write(content)
        
if __name__ == '__main__': 
    f_base = FileBase("/Users/ranelkarimov/Library/Mobile Documents/com~apple~CloudDocs/Studium /Semester 6/AI Agents Forschungsprojekt/AgentArchitectureSystem/src/shared")
    f_base.traverse()

    logger.info(f"Num files: {f_base.num_files}")