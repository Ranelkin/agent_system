
import os
from langchain.chat_models import init_chat_model
from dotenv import load_dotenv

# Load environment variables from a .env file
load_dotenv()

# Retrieve the OpenAI API key from environment variables
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

# Initialize the chat model using the specified model name
llm = init_chat_model("openai:gpt-4.1-nano-2025-04-14")


def UNIT_test():
    """
    _______GENERATED BY CODE_AGENT_______
    This function contains unit tests for the provided script. It tests:
    1. Loading environment variables.
    2. Initialization of the chat model.
    """
    import types

    # Save original environment for restoration after tests
    original_environ = os.environ.copy()

    class MockEnviron(dict):
        def get(self, key, default=None):
            return super().get(key, default)

    try:
        # Test 1: Verify environment variable loading
        os.environ = MockEnviron({'OPENAI_API_KEY': 'test_key'})
        load_dotenv()  # Loads environment variables from .env, does not override existing ones
        api_key = os.environ.get('OPENAI_API_KEY')
        assert api_key == 'test_key', f"Expected 'test_key', got {api_key}"

        # Test 2: Initialize model with valid name
        model_name = "openai:gpt-4.1-nano-2025-04-14"
        model_instance = init_chat_model(model_name)
        assert model_instance is not None, "Model initialization returned None"
        # Check the model instance for callability or expected attributes
        assert hasattr(model_instance, '__call__') or hasattr(model_instance, 'generate'), \
            "Model instance does not appear to be callable or have generate method"

    finally:
        # Restore original environment variables
        os.environ.clear()
        os.environ.update(original_environ)


# Run unit tests if this script is executed directly
if __name__ == "__main__":
    UNIT_test()
