from typing import Annotated

from typing_extensions import TypedDict

from langgraph.graph import StateGraph, START, END
from langgraph.graph.message import add_messages
from ...model.agent import llm 

class State(TypedDict):
    messages: Annotated[list, add_messages]


graph_builder = StateGraph(State)

def code_agent(state: State):
    """
    GENERATED BY CODE_AGENT
    Invokes the LLM on the state's messages and returns the assistant response as a single-element
    messages list suitable for downstream consumption.
    """
    # _CA
    return {"messages": [llm.invoke(state["messages"])]}



graph_builder.add_node("code_agent", code_agent)

graph_builder.add_edge(START, "code_agent")
    
graph_builder.add_edge("code_agent", END)
    
graph = graph_builder.compile()
    
def stream_graph_updates(user_input: str):
    """
    GENERATED BY CODE_AGENT
    Streams incremental updates from the graph for the given user input and prints the latest
    assistant content to stdout as a side-effect during streaming.
    """
    # _CA
    for event in graph.stream({"messages": [{"role": "user", "content": user_input}]}):
        for value in event.values():
            print("Assistant:", value["messages"][-1].content)
            return value["messages"][-1].content
            


if __name__ == '__main__': 
    while True:
        try:
            user_input = input("Code: ")
            prompt = """You are a computer scientist that strives for 
            1. Efficiency and performance of code, 
            2. Readability and maintanability
            3. Simplicity (Keep it simple stupid where possible)
            Your task is to improve documentation and commentation of the code, as well as provide Unit Tests where none are present
            extract the tests in an own Method called UNIT_test.
            ALWAYS add an caps lock comment '_______GENERATED BY CODE_AGENT_______' 
            to generated code from you at the beginning of the docstring. Dont change the existing code, only create comments and unit tests.
            Return ONLY the code, dont provide any natural language response as the content will be taken over directly in the codebase. 
            Also dont add leading and trailing declarators like  or ´´´  or 'python' """
            if user_input.lower() in ["quit", "exit", "q"]:
                print("Goodbye!")
                break
            stream_graph_updates(prompt+user_input)
        except:
            user_input = input("Code: ") 
            print("User: " + user_input)
            stream_graph_updates(user_input)
            break