from ....shared.log_config import setup_logging
from ....util.FileBase import FileBase
from ....infrastructure.llm.graph import stream_graph_updates

logger = setup_logging("test_service")

def create_unit_tests(dir: str) -> dict: 
    """_summary_"""
    logger.info(f"Start creating unit tests for codebase: {dir}")
    processed_files = []
    try: 
        f_base = FileBase(dir)
        f_base.traverse()
        num_files = f_base.get_num_files()
        logger.info(f"Found {num_files} files to process")
        
        logger.info(f"Files list: {f_base.files}")
        
        if num_files == 0:
            logger.warning("No files found to process")
            return {
                "status": "success",
                "files_processed": [],
                "count": 0,
                "message": "No files found to process"
            }
        
        for i in range(num_files):
            logger.info(f"Processing file {i+1}/{num_files}")
            f = f_base.get_file()
            logger.info(f"Processing file {i+1}/{num_files}: {f}")
            
            if f is None:
                logger.warning(f"Finished processing files")
                break
                
            logger.info(f"Processing file: {f}")
            
            # Skip non-Python files
            if not f.endswith('.py'):
                logger.info(f"Skipping non-Python file: {f}")
                continue
        
            code = f_base.file_content(f)
            
            if code is None:
                logger.warning(f"Could not read content from file: {f}")
                continue
                
            logger.info(f"File content length: {len(code)} characters")
            
            # Prepare prompt for LLM
            content = " code: " + code
            prompt = f"""
            You are a code agent that strives for 
            1. Efficiency and performance of code, 
            2. Readability and maintanability
            3. Simplicity (Keep it simple stupid where possible)
            Your task is to provide Unit Tests for the passed module using pytest. 
            ALWAYS add an caps lock comment 'GENERATED BY CODE_AGENT' 
            to generated code from you at the beginning of the docstring. The resulting unittest will be stored in the same directory under '<filename>_test.py
            DO NOT change already existing code"""
            
            logger.info(f"Sending file to LLM for processing: {f}")
            unittests = stream_graph_updates(prompt + content)
            logger.info(f"Received response from LLM, length: {len(unittests) if unittests else 0}")
            test_file = f.split(".py")[0]+"_test.py"
            
            if unittests:
                unittests = unittests.replace('', '')
                unittests = unittests.replace('', '')
                f_base.create_file(test_file, unittests)
                processed_files.append(f)
            else:
                logger.warning(f"No response from LLM for file: {f}")
        
        return {
            "status": "success",
            "files_processed": processed_files,
            "count": len(processed_files),
            "message": None
        }
    except Exception as e: 
        logger.error(f"Failed to create unit test: {e}")
        return {
          "status": "error", 
          "files_processed": processed_files,
          "count": len(processed_files),
          "message": str(e)
        }