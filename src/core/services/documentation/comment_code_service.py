from langgraph.graph import StateGraph, START, END
from langgraph.graph.message import add_messages
from typing import Annotated
from typing_extensions import TypedDict
from ....shared.log_config import setup_logging
from ....util.FileBase import FileBase
from ....infrastructure.llm.graph import stream_graph_updates

logger = setup_logging("comment_code_service")

class CommentState(TypedDict):
    messages: Annotated[list, add_messages]
    search_results: str | None
    
def comment_codebase(dir: str) -> dict: 
    """Traverese the directory and comments out / document the codebase

    Args:
        dir (str): directory which should be commented out

    Returns:
        dict: returns status of progress
    """
    logger.info(f"Starting to document codebase at: {dir}")
    processed_files = []
    try:
        logger.info(f"Starting documentation for directory: {dir}")
        f_base = FileBase(dir)
        f_base.traverse()

        num_files = f_base.get_num_files()
        
        logger.info(f"Found {num_files} files to process")
        
        logger.info(f"Files list: {f_base.files}")
        
        if num_files == 0:
            logger.warning("No files found to process")
            return {
                "status": "success",
                "files_processed": [],
                "count": 0,
                "message": "No files found to process"
            }
        
        for i in range(num_files):
            logger.info(f"Processing file {i+1}/{num_files}")
            f = f_base.get_file()
            logger.info(f"Processing file {i+1}/{num_files}: {f}")
            
            if f is None:
                logger.warning(f"Finished processing files")
                break
                
            logger.info(f"Processing file: {f}")
            
            # Skip non-Python files
            if not f.endswith('.py'):
                logger.info(f"Skipping non-Python file: {f}")
                continue
        
            code = f_base.file_content(f)
            
            if code is None:
                logger.warning(f"Could not read content from file: {f}")
                continue
                
            logger.info(f"File content length: {len(code)} characters")
            
           
            # Prepare prompt for LLM
            content = " code: " + code
            prompt = f"""
            You are a code agent that strives for 
            1. Efficiency and performance of code, 
            2. Readability and maintanability
            3. Simplicity (Keep it simple stupid where possible)
            Your task is to improve documentation and commentation of the code. 
            ALWAYS add an caps lock comment 'GENERATED BY CODE_AGENT'
            to generated docstrings from you at the beginning of the docstring. 
            Add a _CA as signature after every comment you create. 
            Dont change the existing code, only create comments and docstrings.
            Return ONLY the code, dont provide any natural language response as the content will be taken over directly in the codebase. 
            DO NOT change existing code, the code will be stored in """ 
            
            logger.info(f"Sending file to LLM for processing: {f}")
            updated_file = stream_graph_updates(prompt + content)
            logger.info(f"Received response from LLM, length: {len(updated_file) if updated_file else 0}")
            
            if updated_file:
                updated_file = updated_file.replace('', '')
                updated_file = updated_file.replace('', '')
                f_base.update_file_content(f, updated_file)
                processed_files.append(f)
            else:
                logger.warning(f"No response from LLM for file: {f}")
        
        return {
            "status": "success",
            "files_processed": processed_files,
            "count": len(processed_files),
            "message": None
        }
                
    except Exception as e: 
        logger.error(f"Failed to create documentation for {dir}: {e}", exc_info=True)
        return { 
          "status": "error", 
          "files_processed": processed_files,
          "count": len(processed_files),
          "message": str(e)
         }
      
      
      
def create_comment_agent_graph() -> StateGraph:
    """Factory function to create the comment agent subgraph"""
    logger.info("Creating comment agent graph")
    
    builder = StateGraph(CommentState)
    builder.add_node("comment_agent", comment_codebase)
    builder.add_edge(START, "comment_agent")
    builder.add_edge("comment_agent", END)
    
    return builder.compile()